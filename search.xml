<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/11/11/hello-world/"/>
      <url>/2022/11/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数组：二分查找</title>
      <link href="/2022/11/09/%E6%95%B0%E7%BB%84%EF%BC%9A%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/2022/11/09/%E6%95%B0%E7%BB%84%EF%BC%9A%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704.二分查找"></a>704.二分查找</h1><span id="more"></span><p>给定一个n个元素有序的（升序）整型数组nums和一个目标值target，写一个函数搜索nums中的target，如果目标值存在返回下标，否则返回-1</p><p>示例1:</p><pre class=" language-text"><code class="language-text">输入: nums = [-1,0,3,5,9,12], target = 9     输出: 4       解释: 9 出现在 nums 中并且下标为 4  </code></pre><p>示例2:</p><pre class=" language-text"><code class="language-text">输入: nums = [-1,0,3,5,9,12], target = 2     输出: -1        解释: 2 不存在 nums 中因此返回 -1    ​</code></pre><p>提示：</p><ul><li>你可以假设nums中的元素是不重复的</li></ul><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>首先我们按照普通的做法来实现一遍，也就是从头到位的遍历，查找对应元素的下标</p><pre class=" language-c++"><code class="language-c++">int search(vector<int>& nums, int target)&#123;  for(int i = 0;i < nums.size();i++)&#123;    if(nums[i] == target)&#123;      return i;    &#125;  &#125;  return -1;&#125;</code></pre><p>算法效率为o(n)</p><h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><p>可以按照中间值来区分两个区间</p><p>1 2 3 4 5 6</p><p>这时候需要更新的值就不是从头到位遍历的下标i了，而是区间左右的下标left和right</p><p>我们需要明确当前的区间左右端点的值left和right的含义：</p><p>即在[left,right]这个区间中查找值为target的下标，可以根据中点将区间划分为两块</p><p>注意是在一个左闭右闭的区间中查找</p><ul><li><p>循环的持续条件应为while(left &lt;&#x3D; right)，为什么不是left &lt; right?因为当left &#x3D;&#x3D; right时，区间是有意义的</p></li><li><p>在更新区间范围时，if(nums[middle] &gt; target)，此时target应该在左半边区域，但right应该赋值为middle还是middle-1呢？正确答案应该将right赋值为middle-1，因为我们已经明确了num[middle] &gt; target，那么接下来的区域应该在 [left,middle-1]区间中进行</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20210311153055723.jpg" alt="二分查找"></p><p>代码如下：</p><pre class=" language-c++"><code class="language-c++">class Solution&#123;  public:  int search(vector<int>& nums, int target)&#123;    int left = 0;    int right = nums.size()-1; // 定义target在左闭右闭的区间中查找,[left,right]    while(left <= right)&#123; //循环的持续条件应该是left <= right      int middle = left + ((right-left)/2); //left + 区间长度的一半，可以防止溢出      if(nums[middle] > target)&#123;        right = middle-1;      &#125;      else if(nums[middle] < target)&#123;        middle = left+1;      &#125;else&#123;        return middle      &#125;    &#125;    //循环结束，未找到目标值    return -1;  &#125;&#125;</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>二分法是我们中学时候就接触过的查询方法，相信二分查找的思想大家都是明白的，但在具体的编程实现中，还是有许多细节需要注意的。</p><ul><li><p>首先是二分法适用的范围，一定要在某种程度上有序，可以被二分解决，我们才可以使用二分法，也就是说问题的答案不是在这个区间，就是在那个区间，且两个区间互不包含，并构成了整体的空间。比如在这个问题中，我们的答案可以被中点值划分为两部分</p></li><li><p>还有就是编程实现中的一些问题，<strong>一看就会，一写就废</strong> ，主要就是在于如何去定义这个循环的开始和结束，如何去做边界值的更新，在二分法的实现中，每个人的实现方法可能都不同，我们一定要明确自己对于这个区间的定义是什么，在写的途中不能混淆</p></li><li><p>比如这里我们为什么循环条件是while(left &lt;&#x3D; right)就是因为当left &#x3D;&#x3D; right 时，这个区间是有意义的，但是如果你在一开始写的时候想在[left,right)这个区间中去做查找，那循环的条件就应该是while(left &lt; right)，更新边界的情况也不相同，当nums[middle] &gt; target时，更新右边界 right &#x3D; middle</p><p><img src="https://img-blog.csdnimg.cn/20210311153055723.jpg" alt="二分"></p></li></ul><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=167882&auto=1&height=66"></iframe>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
